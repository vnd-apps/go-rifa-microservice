// Code generated by MockGen. DO NOT EDIT.
// Source: ports.go

// Package mock_order is a generated GoMock package.
package mock_order

import (
	context "context"
	reflect "reflect"

	order "github.com/evmartinelli/go-rifa-microservice/internal/core/order"
	gomock "github.com/golang/mock/gomock"
)

// MockRepo is a mock of Repo interface.
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
}

// MockRepoMockRecorder is the mock recorder for MockRepo.
type MockRepoMockRecorder struct {
	mock *MockRepo
}

// NewMockRepo creates a new mock instance.
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockRepo) CreateOrder(ctx context.Context, r *order.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx, r)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockRepoMockRecorder) CreateOrder(ctx, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockRepo)(nil).CreateOrder), ctx, r)
}

// GetUserOrders mocks base method.
func (m *MockRepo) GetUserOrders(ctx context.Context, userID string) ([]order.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserOrders", ctx, userID)
	ret0, _ := ret[0].([]order.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserOrders indicates an expected call of GetUserOrders.
func (mr *MockRepoMockRecorder) GetUserOrders(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserOrders", reflect.TypeOf((*MockRepo)(nil).GetUserOrders), ctx, userID)
}

// MockPixPayment is a mock of PixPayment interface.
type MockPixPayment struct {
	ctrl     *gomock.Controller
	recorder *MockPixPaymentMockRecorder
}

// MockPixPaymentMockRecorder is the mock recorder for MockPixPayment.
type MockPixPaymentMockRecorder struct {
	mock *MockPixPayment
}

// NewMockPixPayment creates a new mock instance.
func NewMockPixPayment(ctrl *gomock.Controller) *MockPixPayment {
	mock := &MockPixPayment{ctrl: ctrl}
	mock.recorder = &MockPixPaymentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPixPayment) EXPECT() *MockPixPaymentMockRecorder {
	return m.recorder
}

// GeneratePix mocks base method.
func (m *MockPixPayment) GeneratePix() (order.Pix, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeneratePix")
	ret0, _ := ret[0].(order.Pix)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GeneratePix indicates an expected call of GeneratePix.
func (mr *MockPixPaymentMockRecorder) GeneratePix() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeneratePix", reflect.TypeOf((*MockPixPayment)(nil).GeneratePix))
}
