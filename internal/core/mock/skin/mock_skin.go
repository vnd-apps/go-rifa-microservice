// Code generated by MockGen. DO NOT EDIT.
// Source: ports.go

// Package mock_skin is a generated GoMock package.
package mock_skin

import (
	context "context"
	reflect "reflect"

	skin "github.com/evmartinelli/go-rifa-microservice/internal/core/skin"
	gomock "github.com/golang/mock/gomock"
)

// MockSteamWebAPI is a mock of SteamWebAPI interface.
type MockSteamWebAPI struct {
	ctrl     *gomock.Controller
	recorder *MockSteamWebAPIMockRecorder
}

// MockSteamWebAPIMockRecorder is the mock recorder for MockSteamWebAPI.
type MockSteamWebAPIMockRecorder struct {
	mock *MockSteamWebAPI
}

// NewMockSteamWebAPI creates a new mock instance.
func NewMockSteamWebAPI(ctrl *gomock.Controller) *MockSteamWebAPI {
	mock := &MockSteamWebAPI{ctrl: ctrl}
	mock.recorder = &MockSteamWebAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSteamWebAPI) EXPECT() *MockSteamWebAPIMockRecorder {
	return m.recorder
}

// PlayerItens mocks base method.
func (m *MockSteamWebAPI) PlayerItens(arg0 string) (skin.Skin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlayerItens", arg0)
	ret0, _ := ret[0].(skin.Skin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PlayerItens indicates an expected call of PlayerItens.
func (mr *MockSteamWebAPIMockRecorder) PlayerItens(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlayerItens", reflect.TypeOf((*MockSteamWebAPI)(nil).PlayerItens), arg0)
}

// MockPlayerSkinRepo is a mock of PlayerSkinRepo interface.
type MockPlayerSkinRepo struct {
	ctrl     *gomock.Controller
	recorder *MockPlayerSkinRepoMockRecorder
}

// MockPlayerSkinRepoMockRecorder is the mock recorder for MockPlayerSkinRepo.
type MockPlayerSkinRepoMockRecorder struct {
	mock *MockPlayerSkinRepo
}

// NewMockPlayerSkinRepo creates a new mock instance.
func NewMockPlayerSkinRepo(ctrl *gomock.Controller) *MockPlayerSkinRepo {
	mock := &MockPlayerSkinRepo{ctrl: ctrl}
	mock.recorder = &MockPlayerSkinRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlayerSkinRepo) EXPECT() *MockPlayerSkinRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPlayerSkinRepo) Create(arg0 context.Context, arg1 skin.Skin) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockPlayerSkinRepoMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPlayerSkinRepo)(nil).Create), arg0, arg1)
}
